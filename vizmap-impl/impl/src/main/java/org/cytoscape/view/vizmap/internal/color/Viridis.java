package org.cytoscape.view.vizmap.internal.color;

import java.awt.Color;

public enum Viridis {

Viridis ("viridis", "Viridis perceptually balanced palette", new int[] {
		0xfde725,
		0xfbe723,
		0xf8e621,
		0xf6e620,
		0xf4e61e,
		0xf1e51d,
		0xefe51c,
		0xece51b,
		0xeae51a,
		0xe7e419,
		0xe5e419,
		0xe2e418,
		0xdfe318,
		0xdde318,
		0xdae319,
		0xd8e219,
		0xd5e21a,
		0xd2e21b,
		0xd0e11c,
		0xcde11d,
		0xcae11f,
		0xc8e020,
		0xc5e021,
		0xc2df23,
		0xc0df25,
		0xbddf26,
		0xbade28,
		0xb8de29,
		0xb5de2b,
		0xb2dd2d,
		0xb0dd2f,
		0xaddc30,
		0xaadc32,
		0xa8db34,
		0xa5db36,
		0xa2da37,
		0xa0da39,
		0x9dd93b,
		0x9bd93c,
		0x98d83e,
		0x95d840,
		0x93d741,
		0x90d743,
		0x8ed645,
		0x8bd646,
		0x89d548,
		0x86d549,
		0x84d44b,
		0x81d34d,
		0x7fd34e,
		0x7cd250,
		0x7ad151,
		0x77d153,
		0x75d054,
		0x73d056,
		0x70cf57,
		0x6ece58,
		0x6ccd5a,
		0x69cd5b,
		0x67cc5c,
		0x65cb5e,
		0x63cb5f,
		0x60ca60,
		0x5ec962,
		0x5cc863,
		0x5ac864,
		0x58c765,
		0x56c667,
		0x54c568,
		0x52c569,
		0x50c46a,
		0x4ec36b,
		0x4cc26c,
		0x4ac16d,
		0x48c16e,
		0x46c06f,
		0x44bf70,
		0x42be71,
		0x40bd72,
		0x3fbc73,
		0x3dbc74,
		0x3bbb75,
		0x3aba76,
		0x38b977,
		0x37b878,
		0x35b779,
		0x34b679,
		0x32b67a,
		0x31b57b,
		0x2fb47c,
		0x2eb37c,
		0x2db27d,
		0x2cb17e,
		0x2ab07f,
		0x29af7f,
		0x28ae80,
		0x27ad81,
		0x26ad81,
		0x25ac82,
		0x25ab82,
		0x24aa83,
		0x23a983,
		0x22a884,
		0x22a785,
		0x21a685,
		0x21a585,
		0x20a486,
		0x20a386,
		0x1fa287,
		0x1fa187,
		0x1fa188,
		0x1fa088,
		0x1f9f88,
		0x1f9e89,
		0x1e9d89,
		0x1e9c89,
		0x1e9b8a,
		0x1f9a8a,
		0x1f998a,
		0x1f988b,
		0x1f978b,
		0x1f968b,
		0x1f958b,
		0x1f948c,
		0x20938c,
		0x20928c,
		0x20928c,
		0x21918c,
		0x21908d,
		0x218f8d,
		0x218e8d,
		0x228d8d,
		0x228c8d,
		0x228b8d,
		0x238a8d,
		0x23898e,
		0x23888e,
		0x24878e,
		0x24868e,
		0x25858e,
		0x25848e,
		0x25838e,
		0x26828e,
		0x26828e,
		0x26818e,
		0x27808e,
		0x277f8e,
		0x277e8e,
		0x287d8e,
		0x287c8e,
		0x297b8e,
		0x297a8e,
		0x29798e,
		0x2a788e,
		0x2a778e,
		0x2a768e,
		0x2b758e,
		0x2b748e,
		0x2c738e,
		0x2c728e,
		0x2c718e,
		0x2d718e,
		0x2d708e,
		0x2e6f8e,
		0x2e6e8e,
		0x2e6d8e,
		0x2f6c8e,
		0x2f6b8e,
		0x306a8e,
		0x30698e,
		0x31688e,
		0x31678e,
		0x31668e,
		0x32658e,
		0x32648e,
		0x33638d,
		0x33628d,
		0x34618d,
		0x34608d,
		0x355f8d,
		0x355e8d,
		0x365d8d,
		0x365c8d,
		0x375b8d,
		0x375a8c,
		0x38598c,
		0x38588c,
		0x39568c,
		0x39558c,
		0x3a548c,
		0x3a538b,
		0x3b528b,
		0x3b518b,
		0x3c508b,
		0x3c4f8a,
		0x3d4e8a,
		0x3d4d8a,
		0x3e4c8a,
		0x3e4a89,
		0x3e4989,
		0x3f4889,
		0x3f4788,
		0x404688,
		0x404588,
		0x414487,
		0x414287,
		0x424186,
		0x424086,
		0x423f85,
		0x433e85,
		0x433d84,
		0x443b84,
		0x443a83,
		0x443983,
		0x453882,
		0x453781,
		0x453581,
		0x463480,
		0x46337f,
		0x46327e,
		0x46307e,
		0x472f7d,
		0x472e7c,
		0x472d7b,
		0x472c7a,
		0x472a7a,
		0x482979,
		0x482878,
		0x482677,
		0x482576,
		0x482475,
		0x482374,
		0x482173,
		0x482071,
		0x481f70,
		0x481d6f,
		0x481c6e,
		0x481b6d,
		0x481a6c,
		0x48186a,
		0x481769,
		0x481668,
		0x481467,
		0x471365,
		0x471164,
		0x471063,
		0x470e61,
		0x470d60,
		0x460b5e,
		0x460a5d,
		0x46085c,
		0x46075a,
		0x450559,
		0x450457,
		0x440256,
		0x440154
	}),
Plasma ("plasma", "Plasma perceptually balanced palette", new int[] {
		0xf0f921,
		0xf0f724,
		0xf1f525,
		0xf1f426,
		0xf2f227,
		0xf3f027,
		0xf3ee27,
		0xf4ed27,
		0xf5eb27,
		0xf5e926,
		0xf6e826,
		0xf6e626,
		0xf7e425,
		0xf7e225,
		0xf8e125,
		0xf8df25,
		0xf9dd25,
		0xf9dc24,
		0xfada24,
		0xfad824,
		0xfbd724,
		0xfbd524,
		0xfbd324,
		0xfcd225,
		0xfcd025,
		0xfcce25,
		0xfccd25,
		0xfdcb26,
		0xfdca26,
		0xfdc827,
		0xfdc627,
		0xfdc527,
		0xfdc328,
		0xfdc229,
		0xfec029,
		0xfebe2a,
		0xfebd2a,
		0xfebb2b,
		0xfeba2c,
		0xfeb82c,
		0xfeb72d,
		0xfdb52e,
		0xfdb42f,
		0xfdb22f,
		0xfdb130,
		0xfdaf31,
		0xfdae32,
		0xfdac33,
		0xfdab33,
		0xfca934,
		0xfca835,
		0xfca636,
		0xfca537,
		0xfca338,
		0xfba238,
		0xfba139,
		0xfb9f3a,
		0xfa9e3b,
		0xfa9c3c,
		0xfa9b3d,
		0xf99a3e,
		0xf9983e,
		0xf9973f,
		0xf89540,
		0xf89441,
		0xf79342,
		0xf79143,
		0xf79044,
		0xf68f44,
		0xf68d45,
		0xf58c46,
		0xf58b47,
		0xf48948,
		0xf48849,
		0xf3874a,
		0xf3854b,
		0xf2844b,
		0xf1834c,
		0xf1814d,
		0xf0804e,
		0xf07f4f,
		0xef7e50,
		0xef7c51,
		0xee7b51,
		0xed7a52,
		0xed7953,
		0xec7754,
		0xeb7655,
		0xeb7556,
		0xea7457,
		0xe97257,
		0xe97158,
		0xe87059,
		0xe76f5a,
		0xe76e5b,
		0xe66c5c,
		0xe56b5d,
		0xe56a5d,
		0xe4695e,
		0xe3685f,
		0xe26660,
		0xe26561,
		0xe16462,
		0xe06363,
		0xdf6263,
		0xde6164,
		0xde5f65,
		0xdd5e66,
		0xdc5d67,
		0xdb5c68,
		0xda5b69,
		0xda5a6a,
		0xd9586a,
		0xd8576b,
		0xd7566c,
		0xd6556d,
		0xd5546e,
		0xd5536f,
		0xd45270,
		0xd35171,
		0xd24f71,
		0xd14e72,
		0xd04d73,
		0xcf4c74,
		0xce4b75,
		0xcd4a76,
		0xcc4977,
		0xcc4778,
		0xcb4679,
		0xca457a,
		0xc9447a,
		0xc8437b,
		0xc7427c,
		0xc6417d,
		0xc5407e,
		0xc43e7f,
		0xc33d80,
		0xc23c81,
		0xc13b82,
		0xc03a83,
		0xbf3984,
		0xbe3885,
		0xbd3786,
		0xbc3587,
		0xbb3488,
		0xba3388,
		0xb83289,
		0xb7318a,
		0xb6308b,
		0xb52f8c,
		0xb42e8d,
		0xb32c8e,
		0xb22b8f,
		0xb12a90,
		0xb02991,
		0xae2892,
		0xad2793,
		0xac2694,
		0xab2494,
		0xaa2395,
		0xa82296,
		0xa72197,
		0xa62098,
		0xa51f99,
		0xa31e9a,
		0xa21d9a,
		0xa11b9b,
		0xa01a9c,
		0x9e199d,
		0x9d189d,
		0x9c179e,
		0x9a169f,
		0x99159f,
		0x9814a0,
		0x9613a1,
		0x9511a1,
		0x9410a2,
		0x920fa3,
		0x910ea3,
		0x8f0da4,
		0x8e0ca4,
		0x8d0ba5,
		0x8b0aa5,
		0x8a09a5,
		0x8808a6,
		0x8707a6,
		0x8606a6,
		0x8405a7,
		0x8305a7,
		0x8104a7,
		0x8004a8,
		0x7e03a8,
		0x7d03a8,
		0x7b02a8,
		0x7a02a8,
		0x7801a8,
		0x7701a8,
		0x7501a8,
		0x7401a8,
		0x7201a8,
		0x7100a8,
		0x6f00a8,
		0x6e00a8,
		0x6c00a8,
		0x6a00a8,
		0x6900a8,
		0x6700a8,
		0x6600a7,
		0x6400a7,
		0x6300a7,
		0x6100a7,
		0x6001a6,
		0x5e01a6,
		0x5c01a6,
		0x5b01a5,
		0x5901a5,
		0x5801a4,
		0x5601a4,
		0x5502a4,
		0x5302a3,
		0x5102a3,
		0x5002a2,
		0x4e02a2,
		0x4c02a1,
		0x4b03a1,
		0x4903a0,
		0x48039f,
		0x46039f,
		0x44039e,
		0x43039e,
		0x41049d,
		0x3f049c,
		0x3e049c,
		0x3c049b,
		0x3a049a,
		0x38049a,
		0x370499,
		0x350498,
		0x330597,
		0x310597,
		0x2f0596,
		0x2e0595,
		0x2c0594,
		0x2a0593,
		0x280592,
		0x260591,
		0x240691,
		0x220690,
		0x20068f,
		0x1d068e,
		0x1b068d,
		0x19068c,
		0x16078a,
		0x130789,
		0x100788,
		0x0d0887
	}),
Magma ("magma", "Magma perceptually balanced palette", new int[] {
		0xfcfdbf,
		0xfcfbbd,
		0xfcf9bb,
		0xfcf7b9,
		0xfcf6b8,
		0xfcf4b6,
		0xfcf2b4,
		0xfcf0b2,
		0xfceeb0,
		0xfcecae,
		0xfdebac,
		0xfde9aa,
		0xfde7a9,
		0xfde5a7,
		0xfde3a5,
		0xfde2a3,
		0xfde0a1,
		0xfddea0,
		0xfddc9e,
		0xfdda9c,
		0xfed89a,
		0xfed799,
		0xfed597,
		0xfed395,
		0xfed194,
		0xfecf92,
		0xfecd90,
		0xfecc8f,
		0xfeca8d,
		0xfec88c,
		0xfec68a,
		0xfec488,
		0xfec287,
		0xfec185,
		0xfebf84,
		0xfebd82,
		0xfebb81,
		0xfeb97f,
		0xfeb77e,
		0xfeb67c,
		0xfeb47b,
		0xfeb27a,
		0xfeb078,
		0xfeae77,
		0xfeac76,
		0xfeaa74,
		0xfea973,
		0xfea772,
		0xfea571,
		0xfea36f,
		0xfea16e,
		0xfe9f6d,
		0xfe9d6c,
		0xfd9b6b,
		0xfd9a6a,
		0xfd9869,
		0xfd9668,
		0xfd9467,
		0xfd9266,
		0xfc9065,
		0xfc8e64,
		0xfc8c63,
		0xfc8a62,
		0xfc8961,
		0xfb8761,
		0xfb8560,
		0xfb835f,
		0xfa815f,
		0xfa7f5e,
		0xfa7d5e,
		0xf97b5d,
		0xf9795d,
		0xf9785d,
		0xf8765c,
		0xf8745c,
		0xf7725c,
		0xf7705c,
		0xf66e5c,
		0xf66c5c,
		0xf56b5c,
		0xf4695c,
		0xf4675c,
		0xf3655c,
		0xf2645c,
		0xf2625d,
		0xf1605d,
		0xf05f5e,
		0xef5d5e,
		0xee5b5e,
		0xed5a5f,
		0xec5860,
		0xeb5760,
		0xea5661,
		0xe95462,
		0xe85362,
		0xe75263,
		0xe55064,
		0xe44f64,
		0xe34e65,
		0xe24d66,
		0xe04c67,
		0xdf4a68,
		0xde4968,
		0xdc4869,
		0xdb476a,
		0xd9466b,
		0xd8456c,
		0xd6456c,
		0xd5446d,
		0xd3436e,
		0xd2426f,
		0xd0416f,
		0xcf4070,
		0xcd4071,
		0xcc3f71,
		0xca3e72,
		0xc83e73,
		0xc73d73,
		0xc53c74,
		0xc43c75,
		0xc23b75,
		0xc03a76,
		0xbf3a77,
		0xbd3977,
		0xbc3978,
		0xba3878,
		0xb83779,
		0xb73779,
		0xb5367a,
		0xb3367a,
		0xb2357b,
		0xb0357b,
		0xae347b,
		0xad347c,
		0xab337c,
		0xaa337d,
		0xa8327d,
		0xa6317d,
		0xa5317e,
		0xa3307e,
		0xa1307e,
		0xa02f7f,
		0x9e2f7f,
		0x9c2e7f,
		0x9b2e7f,
		0x992d80,
		0x982d80,
		0x962c80,
		0x942c80,
		0x932b80,
		0x912b81,
		0x902a81,
		0x8e2a81,
		0x8c2981,
		0x8b2981,
		0x892881,
		0x882781,
		0x862781,
		0x842681,
		0x832681,
		0x812581,
		0x802582,
		0x7e2482,
		0x7c2382,
		0x7b2382,
		0x792282,
		0x782281,
		0x762181,
		0x752181,
		0x732081,
		0x721f81,
		0x701f81,
		0x6e1e81,
		0x6d1d81,
		0x6b1d81,
		0x6a1c81,
		0x681c81,
		0x671b80,
		0x651a80,
		0x641a80,
		0x621980,
		0x601880,
		0x5f187f,
		0x5d177f,
		0x5c167f,
		0x5a167e,
		0x59157e,
		0x57157e,
		0x56147d,
		0x54137d,
		0x52137c,
		0x51127c,
		0x4f127b,
		0x4e117b,
		0x4c117a,
		0x4a1079,
		0x491078,
		0x471078,
		0x451077,
		0x440f76,
		0x420f75,
		0x400f74,
		0x3f0f72,
		0x3d0f71,
		0x3b0f70,
		0x390f6e,
		0x38106c,
		0x36106b,
		0x341069,
		0x331067,
		0x311165,
		0x2f1163,
		0x2d1161,
		0x2c115f,
		0x2a115c,
		0x29115a,
		0x271258,
		0x251255,
		0x241253,
		0x221150,
		0x21114e,
		0x20114b,
		0x1e1149,
		0x1d1147,
		0x1c1044,
		0x1a1042,
		0x19103f,
		0x180f3d,
		0x160f3b,
		0x150e38,
		0x140e36,
		0x130d34,
		0x120d31,
		0x110c2f,
		0x100b2d,
		0x0e0b2b,
		0x0d0a29,
		0x0c0926,
		0x0b0924,
		0x0a0822,
		0x090720,
		0x08071e,
		0x07061c,
		0x06051a,
		0x060518,
		0x050416,
		0x040414,
		0x030312,
		0x03030f,
		0x02020d,
		0x02020b,
		0x020109,
		0x010108,
		0x010106,
		0x010005,
		0x000004
	}),
Inferno ("inferno", "Inferno perceptually balanced palette", new int[] {
		0xfcffa4,
		0xfafda1,
		0xf9fc9d,
		0xf8fb9a,
		0xf6fa96,
		0xf5f992,
		0xf4f88e,
		0xf3f68a,
		0xf3f586,
		0xf2f482,
		0xf2f27d,
		0xf1f179,
		0xf1ef75,
		0xf1ed71,
		0xf1ec6d,
		0xf2ea69,
		0xf2e865,
		0xf2e661,
		0xf3e55d,
		0xf3e35a,
		0xf4e156,
		0xf4df53,
		0xf4dd4f,
		0xf5db4c,
		0xf5d949,
		0xf6d746,
		0xf6d543,
		0xf7d340,
		0xf7d13d,
		0xf8cf3a,
		0xf8cd37,
		0xf9cb35,
		0xf9c932,
		0xf9c72f,
		0xfac62d,
		0xfac42a,
		0xfac228,
		0xfac026,
		0xfbbe23,
		0xfbbc21,
		0xfbba1f,
		0xfbb81d,
		0xfbb61a,
		0xfcb418,
		0xfcb216,
		0xfcb014,
		0xfcae12,
		0xfcac11,
		0xfcaa0f,
		0xfca80d,
		0xfca60c,
		0xfca50a,
		0xfca309,
		0xfca108,
		0xfc9f07,
		0xfb9d07,
		0xfb9b06,
		0xfb9906,
		0xfb9706,
		0xfb9606,
		0xfa9407,
		0xfa9207,
		0xfa9008,
		0xf98e09,
		0xf98c0a,
		0xf98b0b,
		0xf8890c,
		0xf8870e,
		0xf8850f,
		0xf78410,
		0xf78212,
		0xf68013,
		0xf67e14,
		0xf57d15,
		0xf57b17,
		0xf47918,
		0xf37819,
		0xf3761b,
		0xf2741c,
		0xf1731d,
		0xf1711f,
		0xf06f20,
		0xef6e21,
		0xef6c23,
		0xee6a24,
		0xed6925,
		0xec6726,
		0xeb6628,
		0xeb6429,
		0xea632a,
		0xe9612b,
		0xe8602d,
		0xe75e2e,
		0xe65d2f,
		0xe55c30,
		0xe45a31,
		0xe35933,
		0xe25734,
		0xe15635,
		0xe05536,
		0xdf5337,
		0xde5238,
		0xdd513a,
		0xdb503b,
		0xda4e3c,
		0xd94d3d,
		0xd84c3e,
		0xd74b3f,
		0xd54a41,
		0xd44842,
		0xd34743,
		0xd24644,
		0xd04545,
		0xcf4446,
		0xce4347,
		0xcc4248,
		0xcb4149,
		0xca404a,
		0xc83f4b,
		0xc73e4c,
		0xc63d4d,
		0xc43c4e,
		0xc33b4f,
		0xc13a50,
		0xc03a51,
		0xbf3952,
		0xbd3853,
		0xbc3754,
		0xba3655,
		0xb93556,
		0xb73557,
		0xb63458,
		0xb43359,
		0xb3325a,
		0xb1325a,
		0xb0315b,
		0xae305c,
		0xad305d,
		0xab2f5e,
		0xa92e5e,
		0xa82e5f,
		0xa62d60,
		0xa52c60,
		0xa32c61,
		0xa22b62,
		0xa02a63,
		0x9f2a63,
		0x9d2964,
		0x9b2964,
		0x9a2865,
		0x982766,
		0x972766,
		0x952667,
		0x932667,
		0x922568,
		0x902568,
		0x8f2469,
		0x8d2369,
		0x8c2369,
		0x8a226a,
		0x88226a,
		0x87216b,
		0x85216b,
		0x84206b,
		0x82206c,
		0x801f6c,
		0x7f1e6c,
		0x7d1e6d,
		0x7c1d6d,
		0x7a1d6d,
		0x781c6d,
		0x771c6d,
		0x751b6e,
		0x741a6e,
		0x721a6e,
		0x71196e,
		0x6f196e,
		0x6d186e,
		0x6c186e,
		0x6a176e,
		0x69166e,
		0x67166e,
		0x65156e,
		0x64156e,
		0x62146e,
		0x61136e,
		0x5f136e,
		0x5d126e,
		0x5c126e,
		0x5a116e,
		0x59106e,
		0x57106e,
		0x550f6d,
		0x540f6d,
		0x520e6d,
		0x510e6c,
		0x4f0d6c,
		0x4d0d6c,
		0x4c0c6b,
		0x4a0c6b,
		0x490b6a,
		0x470b6a,
		0x450a69,
		0x440a68,
		0x420a68,
		0x400a67,
		0x3e0966,
		0x3d0965,
		0x3b0964,
		0x390963,
		0x380962,
		0x360961,
		0x340a5f,
		0x320a5e,
		0x310a5c,
		0x2f0a5b,
		0x2d0b59,
		0x2b0b57,
		0x290b55,
		0x280b53,
		0x260c51,
		0x240c4f,
		0x230c4c,
		0x210c4a,
		0x1f0c48,
		0x1e0c45,
		0x1c0c43,
		0x1b0c41,
		0x190c3e,
		0x180c3c,
		0x160b39,
		0x150b37,
		0x140b34,
		0x120a32,
		0x110a30,
		0x10092d,
		0x0e092b,
		0x0d0829,
		0x0c0826,
		0x0b0724,
		0x0a0722,
		0x09061f,
		0x08051d,
		0x07051b,
		0x060419,
		0x050417,
		0x040314,
		0x040312,
		0x030210,
		0x02020e,
		0x02020c,
		0x02010a,
		0x010108,
		0x010106,
		0x010005,
		0x000004
	});

	private String name;
	private String description;
	private int[] hexColors;

	Viridis(String name, String description, int[] colors) {
		this.name = name;
		this.description = description;
		this.hexColors = colors;
	}

	public String getName() { return name; }
	public String getDescription() { return description; }
	public int[] getColors() { return hexColors; }

  public Color getColor(float val) {
    int pos = Integer.MAX_VALUE;
    if (val >= 0 && val <= 1) {
      pos = (int) Math.floor(map(val, 0, 1, 0, hexColors.length - 1));
      return new Color(hexColors[pos]);
    } else
			throw new RuntimeException(this.getClass().getName() + " > Val:" + val + ". Val must be a value between 0 and 1");
  }

	public Color[] getColorPalette(int steps) {
    Color[] palette = new Color[steps];

    float step = hexColors.length / (float) steps;

    for (int i = 0; i < steps; i++) {
      float fraction = step * i;
      if (fraction > hexColors.length - step)
        fraction = hexColors.length - step;
      float val = map(fraction, 0, hexColors.length - step, 0, 1);
      palette[i] = getColor(val);
    }
    return palette;

	}

	private final float map(float value, float istart, float istop, float ostart, float ostop) {
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
  }

}
