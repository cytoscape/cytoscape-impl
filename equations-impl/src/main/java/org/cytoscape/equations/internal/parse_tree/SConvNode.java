package org.cytoscape.equations.internal.parse_tree;

/*
 * #%L
 * Cytoscape Equations Impl (equations-impl)
 * $Id:$
 * $HeadURL:$
 * %%
 * Copyright (C) 2010 - 2021 The Cytoscape Consortium
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as 
 * published by the Free Software Foundation, either version 2.1 of the 
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public 
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */


import java.util.Stack;

import org.cytoscape.equations.CodeAndSourceLocation;
import org.cytoscape.equations.AbstractNode;
import org.cytoscape.equations.TreeNode;
import org.cytoscape.equations.internal.interpreter.Instruction;


/**
 *  A node in the parse tree representing an conversion to a string
 */
public class SConvNode extends AbstractNode {
	private final TreeNode convertee;

	public SConvNode(final TreeNode convertee) {
		super(-1); // Type conversions are generated by the compiler and do not correspond to actual source locations!

		if (convertee == null)
			throw new IllegalArgumentException("convertee must not be null.");

		final Class type = convertee.getType();
		if (type != Double.class && type != Long.class && type != Boolean.class)
			throw new IllegalArgumentException("convertee must be of type Double, Long, or Boolean.");

		this.convertee = convertee;
	}

	public String toString() {
		return "SConvNode: convertee = " + convertee;
	}

	public Class getType() { return String.class; }

	/**
	 *  @return the only child of this node
	 */
	public TreeNode getLeftChild() { return convertee; }

	/**
	 *  @return null, This type of node never has any right children!
	 */
	public TreeNode getRightChild() { return null; }

	public void genCode(final Stack<CodeAndSourceLocation> codeStack) {
		convertee.genCode(codeStack);

		final Class type = convertee.getType();
		if (type == Double.class)
			codeStack.push(new CodeAndSourceLocation(Instruction.SCONVF, getSourceLocation()));
		else if (type == Long.class)
			codeStack.push(new CodeAndSourceLocation(Instruction.SCONVI, getSourceLocation()));
		else if (type == Boolean.class)
			codeStack.push(new CodeAndSourceLocation(Instruction.SCONVB, getSourceLocation()));
		else
			throw new IllegalStateException("unknown type: " + type + ".");
	}
}
